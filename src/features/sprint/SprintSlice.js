import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getActiveSprint } from "./SprintAPI";

const initialState = {
  value: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getProjectsAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getActiveSprintAsync = createAsyncThunk(
  'notifications/getProjects',
  async (id) => {
    const response = await getActiveSprint(id);
    console.log('response: ', response);
    return response;
  }
);

export const sprintSlice = createSlice({
  name: 'sprint',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getActiveSprintAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getActiveSprintAsync.fulfilled, (state, action) => {
        console.log('action.payload: ', action.payload);
        state.status = 'success';
        state.value = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectActiveSprint = (state) => state.sprint.value;
export const selectSprintStatus = (state) => state.sprint.status;

export default sprintSlice.reducer;
